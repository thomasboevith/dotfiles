# Inspired by years of bash use and http://www.tldp.org/LDP/abs/html/sample-bashrc.html

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

#-------------------------------------------------------------
# Some settings
#-------------------------------------------------------------
# These two options are useful for debugging:
alias debug="set -o nounset; set -o xtrace"

ulimit -S -c 0    # Don't want coredumps.
set -o notify
set -o noclobber
set -o ignoreeof

# Enable options:
shopt -s cdspell
shopt -s cdable_vars
shopt -s checkhash
shopt -s checkwinsize
shopt -s sourcepath
shopt -s no_empty_cmd_completion
shopt -s cmdhist
shopt -s histappend histreedit histverify
shopt -s extglob       # Necessary for programmable completion.

# Disable options:
shopt -u mailwarn
unset MAILCHECK        # Don't want my shell to warn me of incoming mail.

force_color_prompt=yes

#-------------------------------------------------------------
# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[m"               # Color Reset

ALERT=${BWhite}${On_Red} # Bold White on red background

echo -e "${BRed}Welcome on $HOSTNAME${NC}"
date +%Y-%m-%d\ %H:%M:%S 
echo

#-------------------------------------------------------------
# Prompt
#-------------------------------------------------------------
HN=${BYellow}

# Local customized colors, printer, path and environment settings, etc.
if [ -f ~/.bash_local ]; then . ~/.bash_local; fi

# Test connection type:
if [ -n "${SSH_CONNECTION}" ]; then
    CNX=${Cyan}     # Connected on remote machine, via ssh.
else
    CNX=${White}    # Connected on local machine.
fi

# Test user name:
if [[ ${USER} == "root" ]]; then
    SU=${BWhite}${On_Red}     # User is root.
elif [[ ${USER} != $(whoami) ]]; then
    SU=${BGreen}${On_Red}     # User is not login user.
else
    SU=""            # User is normal (well ... most of us are).
fi

# Now we construct the prompt.
PROMPT_COMMAND="history -a"
case ${TERM} in
  *term | rxvt | linux | screen)
        PS1="\[${SU}\]\u\[${NC}\]\[${CNX}\]@\[${NC}\]\[${HN}\]\h:\[${NC}\]\[${Green}\]\w\[${NC}\]>"
        # Set title of current xterm:
        PS1=${PS1}"\[\e]0;[\u@\h] \w\a\]"
        ;;
    *)
        PS1="\u@\h:\w>"
                               # --> Shows full pathname of current dir.
        ;;
esac

export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
export HISTIGNORE="&:bg:fg:ll:h"
export HISTTIMEFORMAT="$(echo -e ${BCyan})[%d/%m %H:%M:%S]$(echo -e ${NC}) "
export HISTCONTROL=ignoredups
export HOSTFILE=$HOME/.hosts    # Put a list of remote hosts in ~/.hosts

#============================================================
#  ALIASES AND FUNCTIONS
#============================================================
alias h='history'
alias j='jobs -l'
alias which='type -a'

# Pretty-print of some PATH variables:
alias path='echo -e ${PATH//:/\\n}'
alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\n}'

alias du='du -kh'    # Makes a more readable output.
alias df='df -kTh'

#-------------------------------------------------------------
# The 'ls' family (this assumes you use a recent GNU ls).
#-------------------------------------------------------------
alias ls='ls --color'
alias lsh='ls -lh'         #  Human-readable
alias lx='ls -lXB'         #  Sort by extension.
alias lk='ls -lSr'         #  Sort by size, biggest last.
alias ltr='ls -ltr --full-time' #  Sort by date, most recent last.
alias lc='ls -ltcr'        #  Sort by/show change time,most recent last.
alias lu='ls -ltur'        #  Sort by/show access time,most recent last.

# The ubiquitous 'll': directories first, with alphanumeric sorting:
alias ll="ls -lv --group-directories-first"
alias lm='ll |more'        #  Pipe through 'more'
alias lr='ll -R'           #  Recursive ls.
alias la='ll -A'           #  Show hidden files.
alias tree='tree -Csuh'    #  Nice alternative to 'recursive ls' ...

export LESS='-M'

#-------------------------------------------------------------
# File Operations
#-------------------------------------------------------------
alias rmnc="rm -f"  # only if you mean it
alias rm="rm -i"    # -i Prevents accidentally clobbering files.
alias mv="mv -i"
alias cp="cp -i"
function findfile { find . -type f -iname '*'"$*"'*' -ls ; }
function finddir { find . -type d -iname '*'"$*"'*' -ls ; }
function diskhogs { numtofind="$1"; if test "$numtofind" == ""; then numtofind=8; fi; du -cks * | sort -rn | head -n"$numtofind" ; }
function bakdate { md5sum=$(md5sum "$1" | gawk '{print $1}'); outfile="$1"_$(date +%Y-%m-%d)_$md5sum; if test ! -e $outfile; then cp "$1" $outfile; fi  }
function dirstat {
  if [ "$1" == "" ]; then dir="."; else dir="$1"; fi
  echo dir: "$dir"
  spaceused=$(du -sh "$dir" | gawk '{print $1}')
  echo spaceused: $spaceused
  numdirs=$(find "$dir" -type d | grep -Ev '^.$' | wc -l)
  echo numdirs: $numdirs \(including "$dir"\)
  numfiles=$(find "$dir" -type f | wc -l)
  echo numfiles: $numfiles
  if ( (test "$numdirs" -ne 0) || (test "$numdirs" -ne 0) ); then
      filetypes=$(find "$dir" -type f | grep -Eo '\.[[:alnum:]]*$' | sort | uniq -c | sort -rn | tr '\n' ',')
      echo filetypes: $filetypes
      numdirs=10
      echo largest $numdirs dirs:
      find "$dir" -maxdepth 1 -type d | while read line; do
	  if test "$line" != "$dir"; then du -sk "$line"; fi
      done | sort -rn | head -n $numdirs
  fi
}
#-------------------------------------------------------------
# Compression
#-------------------------------------------------------------
alias lstar="tar -tf"
alias lstgz="tar -tzf"
alias lstbz="tar -tjf"
alias mktar="tar -vcf"
alias mktgz="tar -vczf"
alias mktbz="tar -vcjf"

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
#-------------------------------------------------------------
# Audio / Video
#-------------------------------------------------------------
alias youtube-dl-audio-m4a='youtube-dl -f bestaudio[ext=m4a] --embed-thumbnail --add-metadata'
alias youtube-dl-audio-mp3='youtube-dl -f bestaudio --extract-audio --audio-format mp3'

#-------------------------------------------------------------
# Useful Shortcuts
#-------------------------------------------------------------
alias screen='screen -R'
alias a2ps='a2ps --header=asdf'
alias a2ps_1=' a2ps --header=asdf --portrait --rows=1 --columns=1'
alias a2ps_4=' a2ps --header=asdf --portrait --rows=2 --columns=2'
alias gifview='gifview -a'
alias grep='grep --color=auto'
alias emacs='emacs -nw'
emacsro() { # Read-only emacs
  emacs -nw "$1" --eval '(setq buffer-read-only t)'
}

function mydf()         # Pretty-print of 'df' output.
{                       # Inspired by 'dfc' utility.
    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}

function myip() # Get IP adress on ethernet.
{
    MY_IP=$(ifconfig | grep -E 'inet addr' -B1 | gawk '{print $1, $2}' | sed 's/Link//g')
    echo ${MY_IP:-"Not connected"}
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; myip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}

#-------------------------------------------------------------
# Github
#-------------------------------------------------------------
GIT_COMMITTER_EMAIL=thomasboevith@users.noreply.github.com
GIT_AUTHOR_EMAIL=thomasboevith@users.noreply.github.com
GIT_COMMITTER_NAME="Thomas BÃ¸vith"
GIT_AUTHOR_NAME="Thomas BÃ¸vith"

#-------------------------------------------------------------
# Paths
#-------------------------------------------------------------
PATH=$PATH":$HOME/bin:$HOME/scr"
